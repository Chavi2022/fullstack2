import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.node.ArrayNode;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpMethod;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

@Service
public class PoolApiService {

    private final RestTemplate restTemplate;
    private final ObjectMapper objectMapper;
    private final Logger log = LoggerFactory.getLogger(PoolApiService.class);

    @Autowired
    public PoolApiService(RestTemplate restTemplate, ObjectMapper objectMapper) {
        this.restTemplate = restTemplate;
        this.objectMapper = objectMapper;
    }

    // This method gets the base information of the pools before filtering
    public ResponseEntity<List<Pool>> getFilteredPoolRepos() {
        HttpHeaders headers = new HttpHeaders();
        headers.set("Accept", "application/json, text/plain, */*");
        HttpEntity<String> entity = new HttpEntity<>(headers);
        try {
            String apiUrl = "https://gaia-status-api.gaiacloud.jpmchase.net/api/v2/products/aap/pools";
            ResponseEntity<JsonNode> response = restTemplate.exchange(apiUrl, HttpMethod.GET, entity, JsonNode.class);
            if (response.getStatusCode().is2xxSuccessful() && response.getBody() != null) {
                JsonNode responseBody = response.getBody();
                List<Pool> filteredPools = processResponse(responseBody.get("regions"));
                return ResponseEntity.ok(filteredPools);
            } else {
                log.error("Failed to get pool info: " + response.getStatusCode());
                return ResponseEntity.status(response.getStatusCode()).build();
            }
        } catch (Exception e) {
            log.error("Error retrieving the pool: " + e.getMessage(), e);
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).build();
        }
    }

    private List<Pool> processResponse(JsonNode regionsNode) {
        List<Pool> filteredPools = new ArrayList<>();
        try {
            if (regionsNode.isArray()) {
                for (JsonNode regionNode : regionsNode) {
                    String region = regionNode.get("region").asText();
                    ArrayNode poolsNode = (ArrayNode) regionNode.get("pools");

                    if (poolsNode != null) {
                        for (JsonNode poolNode : poolsNode) {
                            if ("strategic".equals(poolNode.get("dataCenterType").asText())) {
                                ArrayNode instancesNode = (ArrayNode) poolNode.get("instances");
                                if (instancesNode != null) {
                                    for (JsonNode instanceNode : instancesNode) {
                                        if ("dev".equals(instanceNode.get("env").asText())) {
                                            Pool pool = objectMapper.treeToValue(poolNode, Pool.class);
                                            pool.setRegion(region);
                                            Pool.Instance instance = objectMapper.treeToValue(instanceNode, Pool.Instance.class);
                                            pool.setInstances(List.of(instance));
                                            filteredPools.add(pool);
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        } catch (Exception e) {
            log.error("Error processing response: " + e.getMessage(), e);
        }
        return filteredPools;
    }
}
