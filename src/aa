import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import lombok.extern.log4j.Log4j2;
import org.springframework.stereotype.Service;

import java.util.ArrayList;
import java.util.Comparator;
import java.util.List;

@Service
@Log4j2
public class PoolService {

    private final PoolApiService poolApiService;
    private final ObjectMapper objectMapper;

    public PoolService(PoolApiService poolApiService, ObjectMapper objectMapper) {
        this.poolApiService = poolApiService;
        this.objectMapper = objectMapper;
    }

    public List<PoolsData.Pool> getFilteredPoolRepos() {
        JsonNode poolApiResponse = poolApiService.getPoolInfo();
        if (poolApiResponse != null) {
            try {
                PoolsData poolsData = objectMapper.treeToValue(poolApiResponse, PoolsData.class);
                return processPoolsData(poolsData);
            } catch (Exception e) {
                log.error("Failed to parse the API response", e);
            }
        } else {
            log.error("Received null response from PoolApiService");
        }
        return List.of();
    }

    private List<PoolsData.Pool> processPoolsData(PoolsData poolsData) {
        List<PoolsData.Pool> filteredPools = new ArrayList<>();
        for (PoolsData.Region region : poolsData.getRegions()) {
            for (PoolsData.Pool pool : region.getPools()) {
                if ("Strategic".equals(pool.getDataCenterType()) && pool.getInstances().stream()
                        .anyMatch(instance -> "dev".equals(instance.getEnv()))) {
                    filteredPools.add(pool);
                }
            }
        }
        filteredPools.sort((p1, p2) -> {
            int available1 = p1.getInstances().stream().mapToInt(instance -> instance.getCapacity().getAvailable()).sum();
            int available2 = p2.getInstances().stream().mapToInt(instance -> instance.getCapacity().getAvailable()).sum();
            return Integer.compare(available2, available1);
        });
        return filteredPools;
    }
}


import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.web.client.RestTemplate;

@Configuration
public class ApiPoolConfig {

    @Bean
    public RestTemplate restTemplate() {
        return new RestTemplate();
    }
}

import com.fasterxml.jackson.annotation.JsonProperty;
import lombok.Data;
import java.util.List;

@Data
public class PoolsData {
    private List<Region> regions;

    @Data
    public static class Region {
        private List<Pool> pools;
    }

    @Data
    public static class Pool {
        @JsonProperty("pool")
        private String poolName;
        private String dataCenterType;
        private List<Instance> instances;
    }

    @Data
    public static class Instance {
        private String env;
        private Capacity capacity;
    }

    @Data
    public static class Capacity {
        private int available;
    }
}


import com.fasterxml.jackson.databind.JsonNode;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;

@Service
public class PoolApiService {

    private final RestTemplate restTemplate;
    private final String poolApiUrl = "http://pile-status-api-pu.lic.edgenuity.com/api/v2/products/app/pools";

    public PoolApiService(RestTemplate restTemplate) {
        this.restTemplate = restTemplate;
    }

    public JsonNode getPoolInfo() {
        return restTemplate.getForObject(poolApiUrl, JsonNode.class);
    }
}

import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import java.util.List;

@RestController
@RequestMapping("/api/pools")
public class GaiaMigrationServiceController {

    private final PoolService poolService;

    public GaiaMigrationServiceController(PoolService poolService) {
        this.poolService = poolService;
    }

    @GetMapping(value = "/getFilteredPoolInfo", produces = "application/json")
    public List<PoolsData.Pool> getFilteredPools() {
        return poolService.getFilteredPoolRepos();
    }
}
