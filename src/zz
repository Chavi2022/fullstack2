import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpMethod;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.client.RestClientException;
import org.springframework.web.client.RestTemplate;
import java.util.List;
import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.ArgumentMatchers.*;
import static org.mockito.Mockito.*;

class PoolApiServiceTest {

    @Mock
    private RestTemplate restTemplate;

    private PoolApiService poolApiService;

    @BeforeEach
    void setUp() {
        MockitoAnnotations.openMocks(this);
        poolApiService = new PoolApiService(restTemplate);
    }

    @Test
    void testGetFilteredPools() {
        // Prepare test data
        String mockResponse = "{\"regions\": [{\"region\": \"North America East\", \"pools\": [{\"pool\": \"na-1y\", \"datacenter\": \"Ashburn\", \"dataCenterType\": \"strategic\", \"instances\": [{\"env\": \"dev\", \"capacity\": {\"available\": 10, \"maxSlice\": 5}}]}]}]}";
        
        // Mock the REST call
        when(restTemplate.exchange(
            anyString(),
            eq(HttpMethod.GET),
            any(HttpEntity.class),
            eq(String.class)
        )).thenReturn(new ResponseEntity<>(mockResponse, HttpStatus.OK));

        // Call the method
        ResponseEntity<List<Pool>> result = poolApiService.getFilteredPools();

        // Verify the result
        assertNotNull(result);
        assertEquals(HttpStatus.OK, result.getStatusCode());
        List<Pool> pools = result.getBody();
        assertNotNull(pools);
        assertEquals(1, pools.size());
        Pool pool = pools.get(0);
        assertEquals("na-1y", pool.getPoolName());
        assertEquals("Ashburn", pool.getRegion());
        assertEquals("strategic", pool.getDataCenterType());
    }

    @Test
    void testGetFilteredPoolsWithException() {
        // Mock the REST call to throw an exception
        when(restTemplate.exchange(
            anyString(),
            eq(HttpMethod.GET),
            any(HttpEntity.class),
            eq(String.class)
        )).thenThrow(new RestClientException("Test exception"));

        // Call the method
        ResponseEntity<List<Pool>> result = poolApiService.getFilteredPools();

        // Verify the result
        assertNotNull(result);
        assertEquals(HttpStatus.INTERNAL_SERVER_ERROR, result.getStatusCode());
    }
}
