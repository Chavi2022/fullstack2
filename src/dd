package net.jpchase.camiterms;

import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import net.jpchase.camiterms.model.Pool;
import net.jpchase.camiterms.service.PoolApiService;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.context.annotation.Import;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpMethod;
import org.springframework.http.ResponseEntity;
import org.springframework.web.client.RestTemplate;

import java.util.List;

import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.Mockito.when;

@SpringBootTest
class GaiaMigrationServiceApplicationTest {

    @Autowired
    private PoolApiService poolApiService;

    @MockBean
    private RestTemplate restTemplate;

    @BeforeEach
    void setUp() {
        // Mock the external API response
        String mockResponse = "{\n" +
                "  \"regions\": [\n" +
                "    {\n" +
                "      \"region\": \"North America East\",\n" +
                "      \"pools\": [\n" +
                "        {\n" +
                "          \"dataCenterType\": \"Strategic\",\n" +
                "          \"instances\": [\n" +
                "            {\n" +
                "              \"env\": \"dev\",\n" +
                "              \"capacity\": {\n" +
                "                \"available\": 100\n" +
                "              }\n" +
                "            },\n" +
                "            {\n" +
                "              \"env\": \"prod\",\n" +
                "              \"capacity\": {\n" +
                "                \"available\": 200\n" +
                "              }\n" +
                "            }\n" +
                "          ]\n" +
                "        },\n" +
                "        {\n" +
                "          \"dataCenterType\": \"heritage\",\n" +
                "          \"instances\": [\n" +
                "            {\n" +
                "              \"env\": \"dev\",\n" +
                "              \"capacity\": {\n" +
                "                \"available\": 50\n" +
                "              }\n" +
                "            },\n" +
                "            {\n" +
                "              \"env\": \"test\",\n" +
                "              \"capacity\": {\n" +
                "                \"available\": 75\n" +
                "              }\n" +
                "            }\n" +
                "          ]\n" +
                "        }\n" +
                "      ]\n" +
                "    },\n" +
                "    {\n" +
                "      \"region\": \"Europe West\",\n" +
                "      \"pools\": [\n" +
                "        {\n" +
                "          \"dataCenterType\": \"Strategic\",\n" +
                "          \"instances\": [\n" +
                "            {\n" +
                "              \"env\": \"dev\",\n" +
                "              \"capacity\": {\n" +
                "                \"available\": 300\n" +
                "              }\n" +
                "            },\n" +
                "            {\n" +
                "              \"env\": \"stage\",\n" +
                "              \"capacity\": {\n" +
                "                \"available\": 150\n" +
                "              }\n" +
                "            }\n" +
                "          ]\n" +
                "        },\n" +
                "        {\n" +
                "          \"dataCenterType\": \"Strategic\",\n" +
                "          \"instances\": [\n" +
                "            {\n" +
                "              \"env\": \"prod\",\n" +
                "              \"capacity\": {\n" +
                "                \"available\": 400\n" +
                "              }\n" +
                "            },\n" +
                "            {\n" +
                "              \"env\": \"dev\",\n" +
                "              \"capacity\": {\n" +
                "                \"available\": 250\n" +
                "              }\n" +
                "            }\n" +
                "          ]\n" +
                "        }\n" +
                "      ]\n" +
                "    }\n" +
                "  ]\n" +
                "}";

        ObjectMapper mapper = new ObjectMapper();
        JsonNode mockResponseBody = mapper.readTree(mockResponse);
        ResponseEntity<JsonNode> mockResponseEntity = ResponseEntity.ok(mockResponseBody);

        when(restTemplate.exchange("http://pile-status-api-puliced.jpchase.net/api/v2/products/app/pools", HttpMethod.GET, new HttpEntity<>(new HttpHeaders()), JsonNode.class))
                .thenReturn(mockResponseEntity);
    }

    @Test
    void contextLoads() {
    }

    @Test
    void testGetFilteredPools() {
        List<Pool> filteredPools = poolApiService.getFilteredPools();
        assertThat(filteredPools).isNotNull();
        assertThat(filteredPools).hasSize(2);

        Pool firstPool = filteredPools.get(0);
        assertThat(firstPool.getInstances()).hasSize(1);
        assertThat(firstPool.getInstances().get(0).getEnv()).isEqualTo("dev");
        assertThat(firstPool.getInstances().get(0).getCapacity().getAvailable()).isEqualTo(300);

        Pool secondPool = filteredPools.get(1);
        assertThat(secondPool.getInstances()).hasSize(1);
        assertThat(secondPool.getInstances().get(0).getEnv()).isEqualTo("dev");
        assertThat(secondPool.getInstances().get(0).getCapacity().getAvailable()).isEqualTo(250);
    }
}
