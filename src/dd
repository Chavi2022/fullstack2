package com.example.yourapp.service;

import com.example.yourapp.model.Pool;
import com.example.yourapp.model.PoolsData;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import lombok.extern.log4j.Log4j2;
import org.springframework.stereotype.Service;

import java.util.Comparator;
import java.util.List;
import java.util.stream.Collectors;

@Service
@Log4j2
public class PoolService {

    private final PoolApiService poolApiService;
    private final ObjectMapper objectMapper;

    public PoolService(PoolApiService poolApiService, ObjectMapper objectMapper) {
        this.poolApiService = poolApiService;
        this.objectMapper = objectMapper;
    }

    public List<Pool> getFilteredPoolRepos() {
        JsonNode poolApiResponse = poolApiService.getPoolInfo();
        if (poolApiResponse != null) {
            try {
                PoolsData poolsData = objectMapper.treeToValue(poolApiResponse, PoolsData.class);
                return processPoolsData(poolsData);
            } catch (Exception e) {
                log.error("Failed to parse the API response", e);
            }
        } else {
            log.error("Received null response from PoolApiService");
        }
        return List.of();
    }

    private List<Pool> processPoolsData(PoolsData poolsData) {
        return poolsData.getRegions().stream()
                .flatMap(region -> region.getPools().stream())
                .filter(pool -> "Strategic".equals(pool.getDataCenterType()))
                .filter(pool -> pool.getInstances().stream().anyMatch(instance -> "dev".equals(instance.getEnv())))
                .sorted(Comparator.comparingInt(pool -> pool.getInstances().stream()
                        .mapToInt(instance -> instance.getCapacity().getAvailable())
                        .sum()).reversed())
                .collect(Collectors.toList());
    }
}
