const PoolTable: React.FC = () => {
  const [pools, setPools] = useState<Pool[]>([]);
  const [selectedPools, setSelectedPools] = useState<string[]>([]);
  const [sortKey, setSortKey] = useState<'avgCpu' | 'utilization' | null>(null);
  const [sortDesc, setSortDesc] = useState(true);
  const [showDialog, setShowDialog] = useState(false);

  useEffect(() => {
    getFilteredPoolInfo()
      .then(response => {
        const poolsWithUtilization = response.data.map(pool => ({
          ...pool,
          utilization: computeUtilization(pool.instances[0].capacity.available, pool.instances[0].capacity.total)
        }));
        setPools(poolsWithUtilization);
      })
      .catch(console.error);
  }, []);

  const sortPools = (key: 'avgCpu' | 'utilization') => {
    const desc = sortKey === key ? !sortDesc : true;
    const sortedPools = [...pools].sort((a, b) => {
      const aValue = key === 'utilization' ? parseFloat(a[key].replace('%', '')) : a[key];
      const bValue = key === 'utilization' ? parseFloat(b[key].replace('%', '')) : b[key];
      return aValue > bValue ? (desc ? -1 : 1) : (desc ? 1 : -1);
    });
    setPools(sortedPools);
    setSortKey(key);
    setSortDesc(desc);
  };

  const togglePoolSelection = (poolName: string) => {
    setSelectedPools(prev => 
      prev.includes(poolName) ? prev.filter(p => p !== poolName) : [...prev, poolName]
    );
  };

  const SortButton = ({ column }: { column: 'avgCpu' | 'utilization' }) => (
    <button onClick={() => sortPools(column)} className={tableStyles.sortButton}>
      {column === 'avgCpu' ? 'Avg CPU' : 'Utilization'} {sortKey === column && (sortDesc ? '▼' : '▲')}
    </button>
  );

  const handleContinue = () => {
    console.log("Continuing with selected pools:", selectedPools);
    setShowDialog(false);
  };

  return (
    <div className={tableStyles.container}>
      <table className={tableStyles.table}>
        <thead>
          <tr>
            <th className={tableStyles.th}>Region</th>
            <th className={tableStyles.th}>Pool</th>
            <th className={tableStyles.th}>Data Center Type</th>
            <th className={tableStyles.th}><SortButton column="avgCpu" /></th>
            <th className={tableStyles.th}>Max Slice</th>
            <th className={tableStyles.th}>Next Repave</th>
            <th className={tableStyles.th}><SortButton column="utilization" /></th>
            <th className={tableStyles.th}>Select</th>
          </tr>
        </thead>
        <tbody>
          {pools.map(({ pool, region, dataCenterType, avgCpu, instances, utilization }) => (
            <tr key={pool}>
              <td className={tableStyles.td}>{region}</td>
              <td className={tableStyles.td}>{pool}</td>
              <td className={tableStyles.td}>{dataCenterType}</td>
              <td className={tableStyles.td}>{roundCpu(avgCpu)}</td>
              <td className={tableStyles.td}>{instances[0].capacity.maxSlice}</td>
              <td className={tableStyles.td}>{instances[0].nextRepave}</td>
              <td className={tableStyles.td}>{utilization}</td>
              <td className={`${tableStyles.td} ${tableStyles.checkboxCell}`}>
                <input
                  type="checkbox"
                  checked={selectedPools.includes(pool)}
                  onChange={() => togglePoolSelection(pool)}
                />
              </td>
            </tr>
          ))}
        </tbody>
      </table>
      <button onClick={() => setShowDialog(true)} className={tableStyles.showSelectedButton}>
        Show Selected Pools
      </button>
      {showDialog && (
        <div className={dialogStyles.overlay}>
          <div className={dialogStyles.dialog}>
            <h2>Selected Pools</h2>
            <ul>
              {selectedPools.map(pool => (
                <li key={pool}>{pool}</li>
              ))}
            </ul>
            <button onClick={handleContinue} className={dialogStyles.continueButton}>
              Continue
            </button>
            <button onClick={() => setShowDialog(false)} className={dialogStyles.closeButton}>
              Close
            </button>
          </div>
        </div>
      )}
    </div>
  );
};



export const tableStyles = {
  container: style({
    margin: '20px',
    fontFamily: 'Arial, sans-serif',
  }),
  table: style({
    width: '100%',
    borderCollapse: 'collapse',
    backgroundColor: 'white',
    boxShadow: '0 2px 8px rgba(0,0,0,0.15)',
    borderRadius: '8px',
    overflow: 'hidden',
  }),
  th: style({
    backgroundColor: '#f8f9fa',
    color: '#333',
    fontWeight: 'bold',
    padding: '12px 15px',
    textAlign: 'left',
    borderBottom: '2px solid #ddd',
  }),
  td: style({
    padding: '12px 15px',
    borderBottom: '1px solid #ddd',
  }),
  checkboxCell: style({
    textAlign: 'center',
    width: '50px',
  }),
  sortButton: style({
    background: 'none',
    border: 'none',
    cursor: 'pointer',
    fontWeight: 'bold',
    color: '#333',
    padding: '0',
    ':hover': {
      color: '#007bff',
    },
  }),
  showSelectedButton: style({
    marginTop: '20px',
    padding: '10px 20px',
    backgroundColor: '#007bff',
    color: 'white',
    border: 'none',
    borderRadius: '5px',
    cursor: 'pointer',
    fontSize: '16px',
    ':hover': {
      backgroundColor: '#0056b3',
    },
  }),
};

export const dialogStyles = {
  overlay: style({
    position: 'fixed',
    top: 0,
    left: 0,
    right: 0,
    bottom: 0,
    backgroundColor: 'rgba(0, 0, 0, 0.5)',
    display: 'flex',
    justifyContent: 'center',
    alignItems: 'center',
    zIndex: 1000,
  }),
  dialog: style({
    backgroundColor: 'white',
    padding: '20px',
    borderRadius: '8px',
    maxWidth: '500px',
    width: '100%',
    boxShadow: '0 4px 6px rgba(0, 0, 0, 0.1)',
  }),
  continueButton: style({
    marginRight: '10px',
    padding: '10px 20px',
    backgroundColor: '#28a745',
    color: 'white',
    border: 'none',
    borderRadius: '5px',
    cursor: 'pointer',
    fontSize: '16px',
    ':hover': {
      backgroundColor: '#218838',
    },
  }),
  closeButton: style({
    padding: '10px 20px',
    backgroundColor: '#dc3545',
    color: 'white',
    border: 'none',
    borderRadius: '5px',
    cursor: 'pointer',
    fontSize: '16px',
    ':hover': {
      backgroundColor: '#c82333',
    },
  }),
};

// Global styles
globalStyle('body', {
  margin: 0,
  padding: 0,
  backgroundColor: '#f0f2f5',
});

globalStyle(`${tableStyles.table} tr:hover`, {
  backgroundColor: '#f5f5f5',
});

globalStyle(`${dialogStyles.dialog} h2`, {
  marginTop: 0,
  color: '#333',
});

globalStyle(`${dialogStyles.dialog} ul`, {
  listStyleType: 'none',
  padding: 0,
});

globalStyle(`${dialogStyles.dialog} li`, {
  margin: '5px 0',
});
