import { style, styleVariants } from '@vanilla-extract/css';

export const tableStyles = {
  container: style({
    width: '100%',
    maxWidth: '1600px',
    margin: '2rem auto',
    backgroundColor: '#1e1e1e',
    borderRadius: '8px',
    overflow: 'hidden',
    fontFamily: 'Arial, sans-serif',
  }),
  table: style({
    width: '100%',
    borderCollapse: 'separate',
    borderSpacing: '0 1px',
  }),
  th: style({
    backgroundColor: '#2a2a2a',
    color: '#ffffff',
    padding: '12px 16px',
    textAlign: 'left',
    fontWeight: 'bold',
    fontSize: '14px',
  }),
  td: style({
    padding: '12px 16px',
    backgroundColor: '#252525',
    color: '#ffffff',
    fontSize: '14px',
  }),
  checkboxCell: style({
    display: 'flex',
    justifyContent: 'center',
  }),
  sortButton: style({
    background: 'none',
    border: 'none',
    cursor: 'pointer',
    fontWeight: 'bold',
    color: '#ffffff',
    padding: '0',
    ':hover': {
      color: '#4CAF50',
    },
  }),
  envTypeDev: style({
    display: 'inline-block',
    backgroundColor: '#9c27b0',
    color: 'white',
    padding: '2px 6px',
    borderRadius: '4px',
    fontSize: '12px',
  }),
  utilization: style({
    display: 'flex',
    alignItems: 'center',
  }),
  utilizationBar: style({
    height: '8px',
    borderRadius: '4px',
    marginRight: '8px',
  }),
  utilizationText: style({
    minWidth: '36px',
  }),
  selectedPoolsContainer: style({
    marginTop: '20px',
    backgroundColor: '#2a2a2a',
    padding: '20px',
    borderRadius: '8px',
  }),
  selectedPoolsTable: style({
    width: '100%',
    borderCollapse: 'separate',
    borderSpacing: '0 1px',
    marginTop: '10px',
  }),
  confirmButton: style({
    marginTop: '20px',
    padding: '10px 20px',
    backgroundColor: '#4CAF50',
    color: 'white',
    border: 'none',
    borderRadius: '5px',
    cursor: 'pointer',
    fontSize: '16px',
    ':hover': {
      backgroundColor: '#45a049',
    },
  }),
};

export const utilizationBarVariants = styleVariants({
  low: { backgroundColor: '#4caf50' },
  medium: { backgroundColor: '#ffc107' },
  high: { backgroundColor: '#ff5722' }
});

export const getUtilizationBarStyle = (percentage: number) => {
  const variantKey = percentage > 70 ? 'high' : percentage > 50 ? 'medium' : 'low';
  return {
    width: `${percentage}%`,
    ...utilizationBarVariants[variantKey]
  };
};
Now, here's the complete PoolTable.tsx file:
typescriptCopyimport React, { useState, useEffect } from 'react';
import { getFilteredPoolInfo } from '../services/filteredPoolService';
import type { Pool } from '../interfaces/Pool';
import { roundCpu, computeAvailability, formatSlice } from '../utils/change';
import { tableStyles, getUtilizationBarStyle } from './tableStyles.css';

function formatNextRepave(dateString: string): string {
  const date = new Date(dateString);
  const days = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];
  const months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
  const dayName = days[date.getDay()];
  const monthName = months[date.getMonth()];
  const dayOfMonth = date.getDate();
  return dayName + ', ' + monthName + ' ' + dayOfMonth;
}

const PoolTable: React.FC = () => {
  const [pools, setPools] = useState<Pool[]>([]);
  const [selectedPools, setSelectedPools] = useState<Pool[]>([]);
  const [sortKey, setSortKey] = useState<'avgCpu' | 'available' | 'maxSlice' | null>(null);
  const [sortDesc, setSortDesc] = useState(true);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    setIsLoading(true);
    getFilteredPoolInfo()
      .then(response => {
        setPools(response.data);
        setIsLoading(false);
      })
      .catch(err => {
        console.error(err);
        setError('Failed to fetch pool data');
        setIsLoading(false);
      });
  }, []);

  const sortByAvgCpu = () => {
    const desc = sortKey === 'avgCpu' ? !sortDesc : true;
    const sortedPools = [...pools].sort((a, b) => {
      if (a.avgCpu === b.avgCpu) return 0;
      if (desc) {
        return b.avgCpu - a.avgCpu;
      } else {
        return a.avgCpu - b.avgCpu;
      }
    });
    setPools(sortedPools);
    setSortKey('avgCpu');
    setSortDesc(desc);
  };

  const sortByAvailable = () => {
    const desc = sortKey === 'available' ? !sortDesc : true;
    const sortedPools = [...pools].sort((a, b) => {
      const aInstance = a.instances[0];
      const bInstance = b.instances[0];
      if (!aInstance || !bInstance) return 0;
      const aPercentage = (aInstance.capacity.available / aInstance.capacity.total) * 100;
      const bPercentage = (bInstance.capacity.available / bInstance.capacity.total) * 100;
      if (aPercentage === bPercentage) return 0;
      if (desc) {
        return bPercentage - aPercentage;
      } else {
        return aPercentage - bPercentage;
      }
    });
    setPools(sortedPools);
    setSortKey('available');
    setSortDesc(desc);
  };

  const sortByMaxSlice = () => {
    const desc = sortKey === 'maxSlice' ? !sortDesc : true;
    const sortedPools = [...pools].sort((a, b) => {
      const aValue = a.instances[0]?.capacity.maxSlice ?? 0;
      const bValue = b.instances[0]?.capacity.maxSlice ?? 0;
      if (aValue === bValue) return 0;
      if (desc) {
        return bValue - aValue;
      } else {
        return aValue - bValue;
      }
    });
    setPools(sortedPools);
    setSortKey('maxSlice');
    setSortDesc(desc);
  };

  const togglePoolSelection = (pool: Pool) => {
    setSelectedPools(prev => 
      prev.some(p => p.pool === pool.pool)
        ? prev.filter(p => p.pool !== pool.pool)
        : [...prev, pool]
    );
  };

  const SortButton = ({ column }: { column: 'avgCpu' | 'available' | 'maxSlice' }) => {
    const sortFunction = 
      column === 'avgCpu' ? sortByAvgCpu :
      column === 'available' ? sortByAvailable :
      sortByMaxSlice;

    const columnName = 
      column === 'avgCpu' ? 'Avg CPU' :
      column === 'available' ? 'Available' :
      'Max Slice';

    return (
      <button onClick={sortFunction} className={tableStyles.sortButton}>
        {columnName} {sortKey === column && (sortDesc ? '▼' : '▲')}
      </button>
    );
  };

  if (isLoading) return <div>Loading...</div>;
  if (error) return <div>Error: {error}</div>;

  return (
    <div className={tableStyles.container}>
      <table className={tableStyles.table}>
        <thead>
          <tr>
            <th className={tableStyles.th}>Pool</th>
            <th className={tableStyles.th}>Env Type</th>
            <th className={tableStyles.th}>API Link</th>
            <th className={tableStyles.th}>Console Link</th>
            <th className={tableStyles.th}><SortButton column="avgCpu" /></th>
            <th className={tableStyles.th}><SortButton column="maxSlice" /></th>
            <th className={tableStyles.th}>Memory Usage</th>
            <th className={tableStyles.th}>CFC Slice</th>
            <th className={tableStyles.th}>CFC Memory Usage</th>
            <th className={tableStyles.th}>Next Repave</th>
            <th className={tableStyles.th}>Select</th>
          </tr>
        </thead>
        <tbody>
          {pools.map(pool => (
            <tr key={pool.pool}>
              <td className={tableStyles.td}>{pool.pool}</td>
              <td className={tableStyles.td}>
                <span className={tableStyles.envTypeDev}>{pool.env}</span>
              </td>
              <td className={tableStyles.td}>API</td>
              <td className={tableStyles.td}>Console</td>
              <td className={tableStyles.td}>
                <div className={tableStyles.utilization}>
                  <div 
                    className={tableStyles.utilizationBar}
                    style={getUtilizationBarStyle(pool.avgCpu)}
                  />
                  <span className={tableStyles.utilizationText}>{roundCpu(pool.avgCpu)}</span>
                </div>
              </td>
              <td className={tableStyles.td}>{formatSlice(pool.instances[0].capacity.maxSlice)}</td>
              <td className={tableStyles.td}>
                <div className={tableStyles.utilization}>
                  <div 
                    className={tableStyles.utilizationBar}
                    style={getUtilizationBarStyle(pool.instances[0].capacity.used / pool.instances[0].capacity.total * 100)}
                  />
                  <span className={tableStyles.utilizationText}>
                    {Math.round(pool.instances[0].capacity.used / pool.instances[0].capacity.total * 100)}%
                  </span>
                </div>
              </td>
              <td className={tableStyles.td}>{pool.instances[0].capacity.total} GB</td>
              <td className={tableStyles.td}>
                <div className={tableStyles.utilization}>
                  <div 
                    className={tableStyles.utilizationBar}
                    style={getUtilizationBarStyle(pool.instances[0].capacity.used / pool.instances[0].capacity.total * 100)}
                  />
                  <span className={tableStyles.utilizationText}>
                    {Math.round(pool.instances[0].capacity.used / pool.instances[0].capacity.total * 100)}%
                  </span>
                </div>
              </td>
              <td className={tableStyles.td}>{formatNextRepave(pool.instances[0].nextRepave)}</td>
              <td className={tableStyles.td}>
                <input
                  type="checkbox"
                  checked={selectedPools.some(p => p.pool === pool.pool)}
                  onChange={() => togglePoolSelection(pool)}
                />
              </td>
            </tr>
          ))}
        </tbody>
      </table>

      {selectedPools.length > 0 && (
        <div className={tableStyles.selectedPoolsContainer}>
          <h3>Selected Pools</h3>
          <table className={tableStyles.selectedPoolsTable}>
            <thead>
              <tr>
                <th>Pool</th>
                <th>Region</th>
                <th>Avg CPU</th>
                <th>Available</th>
              </tr>
            </thead>
            <tbody>
              {selectedPools.map(pool => (
                <tr key={pool.pool}>
                  <td>{pool.pool}</td>
                  <td>{pool.region}</td>
                  <td>{roundCpu(pool.avgCpu)}</td>
                  <td>{computeAvailability(pool.instances[0].capacity.available, pool.instances[0].capacity.total)}</td>
                </tr>
              ))}
            </tbody>
          </table>
          <button 
            onClick={() => console.log("Confirmed pools:", selectedPools)} 
            className={tableStyles.confirmButton}
          >
            Confirm Selected Pools
          </button>
        </div>
      )}
    </div>
  );
};

export default PoolTable;
