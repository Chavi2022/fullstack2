import React, { useState, useEffect } from 'react';
import { getFilteredPoolInfo } from '../../services/FilteredPoolService';
import type { Pool } from '../../Interfaces/Pools';
import { roundCpu, formatSlice, computeAvailability } from '../../utils/change';
import { tablestyles, utilizationBarVariants, dialogStyles } from './tablestyles.css';

function formatNextRepave(nextRepave: string): string {
  if (!nextRepave) return 'N/A';
  const nextRepave2 = nextRepave.substring(0, 10);
  return nextRepave2;
}

interface LinkAlt {
  onClick: (event: React.MouseEvent<HTMLFormElement>) => void;
}

const PoolTable: React.FC = () => {
  const [pools, setPools] = useState<Pool[]>([]);
  const [selectedPools, setSelectedPools] = useState<Pool[]>([]);
  const [confirmedPools, setConfirmedPools] = useState<Pool[]>([]);
  const [sortKey, setSortKey] = useState<string | null>('availability');
  const [sortDesc, setSortDesc] = useState<boolean>(true);
  const [isLoading, setIsLoading] = useState<boolean>(true);
  const [error, setError] = useState<string | null>(null);
  const [showDialog, setShowDialog] = useState<boolean>(false);

  useEffect(() => {
    getFilteredPoolInfo()
      .then((response) => {
        setPools(response.data);
        setIsLoading(false);
      })
      .catch((err) => {
        setError('Failed to fetch pool data');
        setIsLoading(false);
      });
  }, []);

  const handleConfirm = () => {
    setConfirmedPools(selectedPools);
    setSelectedPools([]);
  };

  const togglePoolSelection = (pool: Pool) => {
    setSelectedPools((prev) =>
      prev.includes(pool) ? prev.filter((p) => p !== pool) : [...prev, pool]
    );
  };

  const getAvailabilityPercentage = (available: number, total: number): number => {
    if (total === 0) return 0;
    return Math.round((available / total) * 100);
  };

  if (isLoading) return <div>Loading...</div>;
  if (error) return <div>{error}</div>;

  return (
    <div className={tablestyles.container}>
      <h1>Latest Pool Information</h1>
      <table className={tablestyles.table}>
        <thead>
          <tr>
            <th className={tablestyles.th}>Region</th>
            <th className={tablestyles.th}>Pool</th>
            <th className={tablestyles.th}>Avg CPU</th>
            <th className={tablestyles.th}>Max Slice</th>
            <th className={tablestyles.th}>Availability</th>
            <th className={tablestyles.th}>Select</th>
          </tr>
        </thead>
        <tbody>
          {pools.map((pool) => (
            <tr key={pool.id} className={tablestyles.tr}>
              <td className={tablestyles.td}>{pool.region}</td>
              <td className={tablestyles.td}>{pool.pool}</td>
              <td className={tablestyles.td}>{pool.avgCpu}</td>
              <td className={tablestyles.td}>{formatSlice(pool.instances[0].capacity.maxSlice)}</td>
              <td className={tablestyles.td}>
                {computeAvailability(pool.instances[0].capacity.available, pool.instances[0].capacity.total)}
              </td>
              <td className={tablestyles.td}>
                <input
                  type="checkbox"
                  checked={selectedPools.includes(pool)}
                  onChange={() => togglePoolSelection(pool)}
                />
              </td>
            </tr>
          ))}
        </tbody>
      </table>
      <button onClick={() => setShowDialog(true)} className={tablestyles.showSelectedButton}>
        Show Selected Pools
      </button>
      {showDialog && (
        <div className={dialogStyles.overlay}>
          <div className={dialogStyles.dialog}>
            <h2>Selected Pools</h2>
            <ul className={tablestyles.selectedPools}>
              {selectedPools.map((pool) => (
                <li key={pool.id}>{pool.pool}</li>
              ))}
            </ul>
            <button onClick={handleConfirm} className={dialogStyles.continueButton}>
              Yes
            </button>
            <button onClick={() => setShowDialog(false)} className={dialogStyles.closeButton}>
              No
            </button>
          </div>
        </div>
      )}
      {confirmedPools.length > 0 && (
        <div>
          <h2>Confirmed Pools</h2>
          <ul>
            {confirmedPools.map((pool) => (
              <li key={pool.id}>{pool.pool}</li>
            ))}
          </ul>
          <button
            className={dialogStyles.migrateButton}
            disabled={confirmedPools.length === 0}
          >
            Migrate
          </button>
        </div>
      )}
    </div>
  );
};

export default PoolTable;

import { style } from '@vanilla-extract/css';

export const tablestyles = {
  container: style({
    width: '100%',
    maxWidth: '1080px',
    margin: '0 auto',
    backgroundColor: '#e1e1e1',
    borderRadius: '8px',
    overflow: 'hidden',
    fontFamily: 'Arial, sans-serif',
    textAlign: 'center',
  }),
  table: style({
    width: '100%',
    borderCollapse: 'collapse',
  }),
  th: style({
    backgroundColor: '#2a2a2a',
    color: '#ffffff',
    padding: '12px 16px',
    textAlign: 'center',
    fontWeight: 'bold',
    fontSize: '14px',
  }),
  td: style({
    padding: '12px 16px',
    backgroundColor: '#252525',
    color: '#ffffff',
    fontSize: '14px',
    textAlign: 'center',
  }),
  tr: style({
    ':hover': {
      backgroundColor: '#d3d3d3', // Light grey background on hover
      color: '#0000ff', // Blue text color on hover
    },
  }),
  showSelectedButton: style({
    marginTop: '20px',
    padding: '12px 20px',
    backgroundColor: '#4CAF50',
    color: 'white',
    border: 'none',
    borderRadius: '5px',
    cursor: 'pointer',
    fontSize: '16px',
    ':hover': {
      backgroundColor: '#45a049',
    },
  }),
  selectedPools: style({
    listStyleType: 'none',
    paddingLeft: 0,
  }),
};

// Additional styles for dialog and migration button...
export const dialogStyles = {
  overlay: style({
    position: 'fixed',
    top: 0,
    left: 0,
    right: 0,
    bottom: 0,
    backgroundColor: 'rgba(0, 0, 0, 0.5)',
    display: 'flex',
    justifyContent: 'center',
    alignItems: 'center',
    zIndex: 1000,
  }),
  dialog: style({
    backgroundColor: '#2a2a2a',
    padding: '20px',
    borderRadius: '8px',
    maxWidth: '580px',
    width: '100%',
    boxShadow: '0 4px 6px rgba(0, 0, 0, 0.1)',
    color: '#ffffff',
  }),
  continueButton: style({
    marginRight: '10px',
    padding: '10px 20px',
    backgroundColor: '#4CAF50',
    color: 'white',
    border: 'none',
    borderRadius: '5px',
    cursor: 'pointer',
    fontSize: '16px',
    ':hover': {
      backgroundColor: '#45a049',
    },
  }),
  closeButton: style({
    padding: '10px 20px',
    backgroundColor: '#f44336',
    color: 'white',
    border: 'none',
    borderRadius: '5px',
    cursor: 'pointer',
    fontSize: '16px',
    ':hover': {
      backgroundColor: '#da2f2f',
    },
  }),
  migrateButton: style({
    marginTop: '20px',
    padding: '10px 20px',
    backgroundColor: '#2196F3',
    color: 'white',
    border: 'none',
    borderRadius: '5px',
    cursor: 'pointer',
    fontSize: '16px',
    ':hover': {
      backgroundColor: '#1976D2',
    },
    ':disabled': {
      backgroundColor: '#c0c0c0',
      cursor: 'not-allowed',
    },
  }),
};
